# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from canopy.openapi.configuration import Configuration


class GetAdminTenantSettingsQueryResultSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_types': 'list[str]',
        'tags': 'list[str]',
        'internal_tags': 'list[str]',
        'sim_version': 'object',
        'pool_settings': 'AdminTenantSettingsPoolSettings',
        'secondary_pool_settings': 'AdminTenantSettingsPoolSettings',
        'heavy_pool_settings': 'AdminTenantSettingsPoolSettings'
    }

    attribute_map = {
        'study_types': 'studyTypes',
        'tags': 'tags',
        'internal_tags': 'internalTags',
        'sim_version': 'simVersion',
        'pool_settings': 'poolSettings',
        'secondary_pool_settings': 'secondaryPoolSettings',
        'heavy_pool_settings': 'heavyPoolSettings'
    }

    def __init__(self, study_types=None, tags=None, internal_tags=None, sim_version=None, pool_settings=None, secondary_pool_settings=None, heavy_pool_settings=None, local_vars_configuration=None):  # noqa: E501
        """GetAdminTenantSettingsQueryResultSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._study_types = None
        self._tags = None
        self._internal_tags = None
        self._sim_version = None
        self._pool_settings = None
        self._secondary_pool_settings = None
        self._heavy_pool_settings = None
        self.discriminator = None

        self.study_types = study_types
        self.tags = tags
        self.internal_tags = internal_tags
        self.sim_version = sim_version
        self.pool_settings = pool_settings
        self.secondary_pool_settings = secondary_pool_settings
        self.heavy_pool_settings = heavy_pool_settings

    @property
    def study_types(self):
        """Gets the study_types of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The study_types of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._study_types

    @study_types.setter
    def study_types(self, study_types):
        """Sets the study_types of this GetAdminTenantSettingsQueryResultSettings.


        :param study_types: The study_types of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type study_types: list[str]
        """

        self._study_types = study_types

    @property
    def tags(self):
        """Gets the tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetAdminTenantSettingsQueryResultSettings.


        :param tags: The tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def internal_tags(self):
        """Gets the internal_tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The internal_tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._internal_tags

    @internal_tags.setter
    def internal_tags(self, internal_tags):
        """Sets the internal_tags of this GetAdminTenantSettingsQueryResultSettings.


        :param internal_tags: The internal_tags of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type internal_tags: list[str]
        """

        self._internal_tags = internal_tags

    @property
    def sim_version(self):
        """Gets the sim_version of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The sim_version of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: object
        """
        return self._sim_version

    @sim_version.setter
    def sim_version(self, sim_version):
        """Sets the sim_version of this GetAdminTenantSettingsQueryResultSettings.


        :param sim_version: The sim_version of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type sim_version: object
        """

        self._sim_version = sim_version

    @property
    def pool_settings(self):
        """Gets the pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: AdminTenantSettingsPoolSettings
        """
        return self._pool_settings

    @pool_settings.setter
    def pool_settings(self, pool_settings):
        """Sets the pool_settings of this GetAdminTenantSettingsQueryResultSettings.


        :param pool_settings: The pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type pool_settings: AdminTenantSettingsPoolSettings
        """

        self._pool_settings = pool_settings

    @property
    def secondary_pool_settings(self):
        """Gets the secondary_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The secondary_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: AdminTenantSettingsPoolSettings
        """
        return self._secondary_pool_settings

    @secondary_pool_settings.setter
    def secondary_pool_settings(self, secondary_pool_settings):
        """Sets the secondary_pool_settings of this GetAdminTenantSettingsQueryResultSettings.


        :param secondary_pool_settings: The secondary_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type secondary_pool_settings: AdminTenantSettingsPoolSettings
        """

        self._secondary_pool_settings = secondary_pool_settings

    @property
    def heavy_pool_settings(self):
        """Gets the heavy_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501


        :return: The heavy_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :rtype: AdminTenantSettingsPoolSettings
        """
        return self._heavy_pool_settings

    @heavy_pool_settings.setter
    def heavy_pool_settings(self, heavy_pool_settings):
        """Sets the heavy_pool_settings of this GetAdminTenantSettingsQueryResultSettings.


        :param heavy_pool_settings: The heavy_pool_settings of this GetAdminTenantSettingsQueryResultSettings.  # noqa: E501
        :type heavy_pool_settings: AdminTenantSettingsPoolSettings
        """

        self._heavy_pool_settings = heavy_pool_settings

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAdminTenantSettingsQueryResultSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAdminTenantSettingsQueryResultSettings):
            return True

        return self.to_dict() != other.to_dict()

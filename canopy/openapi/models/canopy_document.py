# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from canopy.openapi.configuration import Configuration


class CanopyDocument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_id': 'str',
        'tenant_id': 'str',
        'user_id': 'str',
        'name': 'str',
        'type': 'str',
        'sub_type': 'str',
        'sim_version': 'str',
        'creation_date': 'datetime',
        'modified_date': 'datetime',
        'properties': 'object',
        'data': 'object',
        'support_session': 'SupportSession',
        'notes': 'str',
        'delete_requested': 'bool',
        'parent_worksheet_id': 'str'
    }

    attribute_map = {
        'document_id': 'documentId',
        'tenant_id': 'tenantId',
        'user_id': 'userId',
        'name': 'name',
        'type': 'type',
        'sub_type': 'subType',
        'sim_version': 'simVersion',
        'creation_date': 'creationDate',
        'modified_date': 'modifiedDate',
        'properties': 'properties',
        'data': 'data',
        'support_session': 'supportSession',
        'notes': 'notes',
        'delete_requested': 'deleteRequested',
        'parent_worksheet_id': 'parentWorksheetId'
    }

    def __init__(self, document_id=None, tenant_id=None, user_id=None, name=None, type=None, sub_type=None, sim_version=None, creation_date=None, modified_date=None, properties=None, data=None, support_session=None, notes=None, delete_requested=None, parent_worksheet_id=None, local_vars_configuration=None):  # noqa: E501
        """CanopyDocument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_id = None
        self._tenant_id = None
        self._user_id = None
        self._name = None
        self._type = None
        self._sub_type = None
        self._sim_version = None
        self._creation_date = None
        self._modified_date = None
        self._properties = None
        self._data = None
        self._support_session = None
        self._notes = None
        self._delete_requested = None
        self._parent_worksheet_id = None
        self.discriminator = None

        if document_id is not None:
            self.document_id = document_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if sub_type is not None:
            self.sub_type = sub_type
        if sim_version is not None:
            self.sim_version = sim_version
        if creation_date is not None:
            self.creation_date = creation_date
        if modified_date is not None:
            self.modified_date = modified_date
        if properties is not None:
            self.properties = properties
        if data is not None:
            self.data = data
        if support_session is not None:
            self.support_session = support_session
        if notes is not None:
            self.notes = notes
        if delete_requested is not None:
            self.delete_requested = delete_requested
        if parent_worksheet_id is not None:
            self.parent_worksheet_id = parent_worksheet_id

    @property
    def document_id(self):
        """Gets the document_id of this CanopyDocument.  # noqa: E501


        :return: The document_id of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this CanopyDocument.


        :param document_id: The document_id of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CanopyDocument.  # noqa: E501


        :return: The tenant_id of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CanopyDocument.


        :param tenant_id: The tenant_id of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this CanopyDocument.  # noqa: E501


        :return: The user_id of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CanopyDocument.


        :param user_id: The user_id of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this CanopyDocument.  # noqa: E501


        :return: The name of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CanopyDocument.


        :param name: The name of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this CanopyDocument.  # noqa: E501


        :return: The type of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CanopyDocument.


        :param type: The type of this CanopyDocument.  # noqa: E501
        :type: str
        """
        allowed_values = ["automatedTest", "config", "study", "tenantSettings", "adminTenantSettings", "configSubTree", "userSettings", "job"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sub_type(self):
        """Gets the sub_type of this CanopyDocument.  # noqa: E501


        :return: The sub_type of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this CanopyDocument.


        :param sub_type: The sub_type of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def sim_version(self):
        """Gets the sim_version of this CanopyDocument.  # noqa: E501


        :return: The sim_version of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._sim_version

    @sim_version.setter
    def sim_version(self, sim_version):
        """Sets the sim_version of this CanopyDocument.


        :param sim_version: The sim_version of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._sim_version = sim_version

    @property
    def creation_date(self):
        """Gets the creation_date of this CanopyDocument.  # noqa: E501


        :return: The creation_date of this CanopyDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CanopyDocument.


        :param creation_date: The creation_date of this CanopyDocument.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def modified_date(self):
        """Gets the modified_date of this CanopyDocument.  # noqa: E501


        :return: The modified_date of this CanopyDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CanopyDocument.


        :param modified_date: The modified_date of this CanopyDocument.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def properties(self):
        """Gets the properties of this CanopyDocument.  # noqa: E501


        :return: The properties of this CanopyDocument.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CanopyDocument.


        :param properties: The properties of this CanopyDocument.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def data(self):
        """Gets the data of this CanopyDocument.  # noqa: E501


        :return: The data of this CanopyDocument.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CanopyDocument.


        :param data: The data of this CanopyDocument.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def support_session(self):
        """Gets the support_session of this CanopyDocument.  # noqa: E501


        :return: The support_session of this CanopyDocument.  # noqa: E501
        :rtype: SupportSession
        """
        return self._support_session

    @support_session.setter
    def support_session(self, support_session):
        """Sets the support_session of this CanopyDocument.


        :param support_session: The support_session of this CanopyDocument.  # noqa: E501
        :type: SupportSession
        """

        self._support_session = support_session

    @property
    def notes(self):
        """Gets the notes of this CanopyDocument.  # noqa: E501


        :return: The notes of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CanopyDocument.


        :param notes: The notes of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def delete_requested(self):
        """Gets the delete_requested of this CanopyDocument.  # noqa: E501


        :return: The delete_requested of this CanopyDocument.  # noqa: E501
        :rtype: bool
        """
        return self._delete_requested

    @delete_requested.setter
    def delete_requested(self, delete_requested):
        """Sets the delete_requested of this CanopyDocument.


        :param delete_requested: The delete_requested of this CanopyDocument.  # noqa: E501
        :type: bool
        """

        self._delete_requested = delete_requested

    @property
    def parent_worksheet_id(self):
        """Gets the parent_worksheet_id of this CanopyDocument.  # noqa: E501


        :return: The parent_worksheet_id of this CanopyDocument.  # noqa: E501
        :rtype: str
        """
        return self._parent_worksheet_id

    @parent_worksheet_id.setter
    def parent_worksheet_id(self, parent_worksheet_id):
        """Sets the parent_worksheet_id of this CanopyDocument.


        :param parent_worksheet_id: The parent_worksheet_id of this CanopyDocument.  # noqa: E501
        :type: str
        """

        self._parent_worksheet_id = parent_worksheet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CanopyDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CanopyDocument):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from canopy.openapi.configuration import Configuration


class GetPoolsItemInterval(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_core_hours': 'float',
        'data_egress_gi_b': 'float',
        'data_ingress_gi_b': 'float'
    }

    attribute_map = {
        'total_core_hours': 'totalCoreHours',
        'data_egress_gi_b': 'dataEgressGiB',
        'data_ingress_gi_b': 'dataIngressGiB'
    }

    def __init__(self, total_core_hours=None, data_egress_gi_b=None, data_ingress_gi_b=None, local_vars_configuration=None):  # noqa: E501
        """GetPoolsItemInterval - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_core_hours = None
        self._data_egress_gi_b = None
        self._data_ingress_gi_b = None
        self.discriminator = None

        if total_core_hours is not None:
            self.total_core_hours = total_core_hours
        if data_egress_gi_b is not None:
            self.data_egress_gi_b = data_egress_gi_b
        if data_ingress_gi_b is not None:
            self.data_ingress_gi_b = data_ingress_gi_b

    @property
    def total_core_hours(self):
        """Gets the total_core_hours of this GetPoolsItemInterval.  # noqa: E501


        :return: The total_core_hours of this GetPoolsItemInterval.  # noqa: E501
        :rtype: float
        """
        return self._total_core_hours

    @total_core_hours.setter
    def total_core_hours(self, total_core_hours):
        """Sets the total_core_hours of this GetPoolsItemInterval.


        :param total_core_hours: The total_core_hours of this GetPoolsItemInterval.  # noqa: E501
        :type: float
        """

        self._total_core_hours = total_core_hours

    @property
    def data_egress_gi_b(self):
        """Gets the data_egress_gi_b of this GetPoolsItemInterval.  # noqa: E501


        :return: The data_egress_gi_b of this GetPoolsItemInterval.  # noqa: E501
        :rtype: float
        """
        return self._data_egress_gi_b

    @data_egress_gi_b.setter
    def data_egress_gi_b(self, data_egress_gi_b):
        """Sets the data_egress_gi_b of this GetPoolsItemInterval.


        :param data_egress_gi_b: The data_egress_gi_b of this GetPoolsItemInterval.  # noqa: E501
        :type: float
        """

        self._data_egress_gi_b = data_egress_gi_b

    @property
    def data_ingress_gi_b(self):
        """Gets the data_ingress_gi_b of this GetPoolsItemInterval.  # noqa: E501


        :return: The data_ingress_gi_b of this GetPoolsItemInterval.  # noqa: E501
        :rtype: float
        """
        return self._data_ingress_gi_b

    @data_ingress_gi_b.setter
    def data_ingress_gi_b(self, data_ingress_gi_b):
        """Sets the data_ingress_gi_b of this GetPoolsItemInterval.


        :param data_ingress_gi_b: The data_ingress_gi_b of this GetPoolsItemInterval.  # noqa: E501
        :type: float
        """

        self._data_ingress_gi_b = data_ingress_gi_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPoolsItemInterval):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPoolsItemInterval):
            return True

        return self.to_dict() != other.to_dict()

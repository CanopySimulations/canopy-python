# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from canopy.openapi.configuration import Configuration


class StudyBlobAccessInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'access_signature': 'str',
        'jobs': 'list[BlobAccessInformation]'
    }

    attribute_map = {
        'url': 'url',
        'access_signature': 'accessSignature',
        'jobs': 'jobs'
    }

    def __init__(self, url=None, access_signature=None, jobs=None, local_vars_configuration=None):  # noqa: E501
        """StudyBlobAccessInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._access_signature = None
        self._jobs = None
        self.discriminator = None

        self.url = url
        self.access_signature = access_signature
        self.jobs = jobs

    @property
    def url(self):
        """Gets the url of this StudyBlobAccessInformation.  # noqa: E501


        :return: The url of this StudyBlobAccessInformation.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this StudyBlobAccessInformation.


        :param url: The url of this StudyBlobAccessInformation.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def access_signature(self):
        """Gets the access_signature of this StudyBlobAccessInformation.  # noqa: E501


        :return: The access_signature of this StudyBlobAccessInformation.  # noqa: E501
        :rtype: str
        """
        return self._access_signature

    @access_signature.setter
    def access_signature(self, access_signature):
        """Sets the access_signature of this StudyBlobAccessInformation.


        :param access_signature: The access_signature of this StudyBlobAccessInformation.  # noqa: E501
        :type access_signature: str
        """
        if self.local_vars_configuration.client_side_validation and access_signature is None:  # noqa: E501
            raise ValueError("Invalid value for `access_signature`, must not be `None`")  # noqa: E501

        self._access_signature = access_signature

    @property
    def jobs(self):
        """Gets the jobs of this StudyBlobAccessInformation.  # noqa: E501


        :return: The jobs of this StudyBlobAccessInformation.  # noqa: E501
        :rtype: list[BlobAccessInformation]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this StudyBlobAccessInformation.


        :param jobs: The jobs of this StudyBlobAccessInformation.  # noqa: E501
        :type jobs: list[BlobAccessInformation]
        """
        if self.local_vars_configuration.client_side_validation and jobs is None:  # noqa: E501
            raise ValueError("Invalid value for `jobs`, must not be `None`")  # noqa: E501

        self._jobs = jobs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyBlobAccessInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyBlobAccessInformation):
            return True

        return self.to_dict() != other.to_dict()

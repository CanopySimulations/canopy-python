# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetPoolsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pool_id': 'PoolId',
        'current_dedicated': 'int',
        'target_dedicated': 'int',
        'current_low_priority': 'int',
        'target_low_priority': 'int',
        'intervals': 'list[GetPoolsItemInterval]'
    }

    attribute_map = {
        'pool_id': 'poolId',
        'current_dedicated': 'currentDedicated',
        'target_dedicated': 'targetDedicated',
        'current_low_priority': 'currentLowPriority',
        'target_low_priority': 'targetLowPriority',
        'intervals': 'intervals'
    }

    def __init__(self, pool_id=None, current_dedicated=None, target_dedicated=None, current_low_priority=None, target_low_priority=None, intervals=None):  # noqa: E501
        """GetPoolsItem - a model defined in Swagger"""  # noqa: E501

        self._pool_id = None
        self._current_dedicated = None
        self._target_dedicated = None
        self._current_low_priority = None
        self._target_low_priority = None
        self._intervals = None
        self.discriminator = None

        if pool_id is not None:
            self.pool_id = pool_id
        if current_dedicated is not None:
            self.current_dedicated = current_dedicated
        if target_dedicated is not None:
            self.target_dedicated = target_dedicated
        if current_low_priority is not None:
            self.current_low_priority = current_low_priority
        if target_low_priority is not None:
            self.target_low_priority = target_low_priority
        if intervals is not None:
            self.intervals = intervals

    @property
    def pool_id(self):
        """Gets the pool_id of this GetPoolsItem.  # noqa: E501


        :return: The pool_id of this GetPoolsItem.  # noqa: E501
        :rtype: PoolId
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this GetPoolsItem.


        :param pool_id: The pool_id of this GetPoolsItem.  # noqa: E501
        :type: PoolId
        """

        self._pool_id = pool_id

    @property
    def current_dedicated(self):
        """Gets the current_dedicated of this GetPoolsItem.  # noqa: E501


        :return: The current_dedicated of this GetPoolsItem.  # noqa: E501
        :rtype: int
        """
        return self._current_dedicated

    @current_dedicated.setter
    def current_dedicated(self, current_dedicated):
        """Sets the current_dedicated of this GetPoolsItem.


        :param current_dedicated: The current_dedicated of this GetPoolsItem.  # noqa: E501
        :type: int
        """

        self._current_dedicated = current_dedicated

    @property
    def target_dedicated(self):
        """Gets the target_dedicated of this GetPoolsItem.  # noqa: E501


        :return: The target_dedicated of this GetPoolsItem.  # noqa: E501
        :rtype: int
        """
        return self._target_dedicated

    @target_dedicated.setter
    def target_dedicated(self, target_dedicated):
        """Sets the target_dedicated of this GetPoolsItem.


        :param target_dedicated: The target_dedicated of this GetPoolsItem.  # noqa: E501
        :type: int
        """

        self._target_dedicated = target_dedicated

    @property
    def current_low_priority(self):
        """Gets the current_low_priority of this GetPoolsItem.  # noqa: E501


        :return: The current_low_priority of this GetPoolsItem.  # noqa: E501
        :rtype: int
        """
        return self._current_low_priority

    @current_low_priority.setter
    def current_low_priority(self, current_low_priority):
        """Sets the current_low_priority of this GetPoolsItem.


        :param current_low_priority: The current_low_priority of this GetPoolsItem.  # noqa: E501
        :type: int
        """

        self._current_low_priority = current_low_priority

    @property
    def target_low_priority(self):
        """Gets the target_low_priority of this GetPoolsItem.  # noqa: E501


        :return: The target_low_priority of this GetPoolsItem.  # noqa: E501
        :rtype: int
        """
        return self._target_low_priority

    @target_low_priority.setter
    def target_low_priority(self, target_low_priority):
        """Sets the target_low_priority of this GetPoolsItem.


        :param target_low_priority: The target_low_priority of this GetPoolsItem.  # noqa: E501
        :type: int
        """

        self._target_low_priority = target_low_priority

    @property
    def intervals(self):
        """Gets the intervals of this GetPoolsItem.  # noqa: E501


        :return: The intervals of this GetPoolsItem.  # noqa: E501
        :rtype: list[GetPoolsItemInterval]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this GetPoolsItem.


        :param intervals: The intervals of this GetPoolsItem.  # noqa: E501
        :type: list[GetPoolsItemInterval]
        """

        self._intervals = intervals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPoolsItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPoolsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

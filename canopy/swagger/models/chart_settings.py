# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChartSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chart_type': 'DocumentSubType',
        'chart_id': 'str',
        'preferred_chart_id': 'str',
        'preferred_chart_user_id': 'UserId'
    }

    attribute_map = {
        'chart_type': 'chartType',
        'chart_id': 'chartId',
        'preferred_chart_id': 'preferredChartId',
        'preferred_chart_user_id': 'preferredChartUserId'
    }

    def __init__(self, chart_type=None, chart_id=None, preferred_chart_id=None, preferred_chart_user_id=None):  # noqa: E501
        """ChartSettings - a model defined in Swagger"""  # noqa: E501

        self._chart_type = None
        self._chart_id = None
        self._preferred_chart_id = None
        self._preferred_chart_user_id = None
        self.discriminator = None

        if chart_type is not None:
            self.chart_type = chart_type
        if chart_id is not None:
            self.chart_id = chart_id
        if preferred_chart_id is not None:
            self.preferred_chart_id = preferred_chart_id
        if preferred_chart_user_id is not None:
            self.preferred_chart_user_id = preferred_chart_user_id

    @property
    def chart_type(self):
        """Gets the chart_type of this ChartSettings.  # noqa: E501


        :return: The chart_type of this ChartSettings.  # noqa: E501
        :rtype: DocumentSubType
        """
        return self._chart_type

    @chart_type.setter
    def chart_type(self, chart_type):
        """Sets the chart_type of this ChartSettings.


        :param chart_type: The chart_type of this ChartSettings.  # noqa: E501
        :type: DocumentSubType
        """

        self._chart_type = chart_type

    @property
    def chart_id(self):
        """Gets the chart_id of this ChartSettings.  # noqa: E501


        :return: The chart_id of this ChartSettings.  # noqa: E501
        :rtype: str
        """
        return self._chart_id

    @chart_id.setter
    def chart_id(self, chart_id):
        """Sets the chart_id of this ChartSettings.


        :param chart_id: The chart_id of this ChartSettings.  # noqa: E501
        :type: str
        """

        self._chart_id = chart_id

    @property
    def preferred_chart_id(self):
        """Gets the preferred_chart_id of this ChartSettings.  # noqa: E501


        :return: The preferred_chart_id of this ChartSettings.  # noqa: E501
        :rtype: str
        """
        return self._preferred_chart_id

    @preferred_chart_id.setter
    def preferred_chart_id(self, preferred_chart_id):
        """Sets the preferred_chart_id of this ChartSettings.


        :param preferred_chart_id: The preferred_chart_id of this ChartSettings.  # noqa: E501
        :type: str
        """

        self._preferred_chart_id = preferred_chart_id

    @property
    def preferred_chart_user_id(self):
        """Gets the preferred_chart_user_id of this ChartSettings.  # noqa: E501


        :return: The preferred_chart_user_id of this ChartSettings.  # noqa: E501
        :rtype: UserId
        """
        return self._preferred_chart_user_id

    @preferred_chart_user_id.setter
    def preferred_chart_user_id(self, preferred_chart_user_id):
        """Sets the preferred_chart_user_id of this ChartSettings.


        :param preferred_chart_user_id: The preferred_chart_user_id of this ChartSettings.  # noqa: E501
        :type: UserId
        """

        self._preferred_chart_user_id = preferred_chart_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChartSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChartSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

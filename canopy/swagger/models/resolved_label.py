# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResolvedLabel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'name': 'str',
        'string_value': 'str',
        'numeric_value': 'float',
        'numeric_statistics': 'ResolvedStatisticLabel',
        'units': 'str'
    }

    attribute_map = {
        'source': 'source',
        'name': 'name',
        'string_value': 'stringValue',
        'numeric_value': 'numericValue',
        'numeric_statistics': 'numericStatistics',
        'units': 'units'
    }

    def __init__(self, source=None, name=None, string_value=None, numeric_value=None, numeric_statistics=None, units=None):  # noqa: E501
        """ResolvedLabel - a model defined in Swagger"""  # noqa: E501

        self._source = None
        self._name = None
        self._string_value = None
        self._numeric_value = None
        self._numeric_statistics = None
        self._units = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if name is not None:
            self.name = name
        if string_value is not None:
            self.string_value = string_value
        if numeric_value is not None:
            self.numeric_value = numeric_value
        if numeric_statistics is not None:
            self.numeric_statistics = numeric_statistics
        if units is not None:
            self.units = units

    @property
    def source(self):
        """Gets the source of this ResolvedLabel.  # noqa: E501


        :return: The source of this ResolvedLabel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResolvedLabel.


        :param source: The source of this ResolvedLabel.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def name(self):
        """Gets the name of this ResolvedLabel.  # noqa: E501


        :return: The name of this ResolvedLabel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResolvedLabel.


        :param name: The name of this ResolvedLabel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def string_value(self):
        """Gets the string_value of this ResolvedLabel.  # noqa: E501


        :return: The string_value of this ResolvedLabel.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this ResolvedLabel.


        :param string_value: The string_value of this ResolvedLabel.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    @property
    def numeric_value(self):
        """Gets the numeric_value of this ResolvedLabel.  # noqa: E501


        :return: The numeric_value of this ResolvedLabel.  # noqa: E501
        :rtype: float
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """Sets the numeric_value of this ResolvedLabel.


        :param numeric_value: The numeric_value of this ResolvedLabel.  # noqa: E501
        :type: float
        """

        self._numeric_value = numeric_value

    @property
    def numeric_statistics(self):
        """Gets the numeric_statistics of this ResolvedLabel.  # noqa: E501


        :return: The numeric_statistics of this ResolvedLabel.  # noqa: E501
        :rtype: ResolvedStatisticLabel
        """
        return self._numeric_statistics

    @numeric_statistics.setter
    def numeric_statistics(self, numeric_statistics):
        """Sets the numeric_statistics of this ResolvedLabel.


        :param numeric_statistics: The numeric_statistics of this ResolvedLabel.  # noqa: E501
        :type: ResolvedStatisticLabel
        """

        self._numeric_statistics = numeric_statistics

    @property
    def units(self):
        """Gets the units of this ResolvedLabel.  # noqa: E501


        :return: The units of this ResolvedLabel.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ResolvedLabel.


        :param units: The units of this ResolvedLabel.  # noqa: E501
        :type: str
        """

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResolvedLabel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResolvedLabel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

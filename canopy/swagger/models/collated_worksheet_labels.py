# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CollatedWorksheetLabels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_definitions': 'CollatedLabelDefinitions',
        'configs': 'list[ConfigResolvedLabels]',
        'studies': 'list[StudyResolvedLabels]'
    }

    attribute_map = {
        'label_definitions': 'labelDefinitions',
        'configs': 'configs',
        'studies': 'studies'
    }

    def __init__(self, label_definitions=None, configs=None, studies=None):  # noqa: E501
        """CollatedWorksheetLabels - a model defined in Swagger"""  # noqa: E501

        self._label_definitions = None
        self._configs = None
        self._studies = None
        self.discriminator = None

        if label_definitions is not None:
            self.label_definitions = label_definitions
        if configs is not None:
            self.configs = configs
        if studies is not None:
            self.studies = studies

    @property
    def label_definitions(self):
        """Gets the label_definitions of this CollatedWorksheetLabels.  # noqa: E501


        :return: The label_definitions of this CollatedWorksheetLabels.  # noqa: E501
        :rtype: CollatedLabelDefinitions
        """
        return self._label_definitions

    @label_definitions.setter
    def label_definitions(self, label_definitions):
        """Sets the label_definitions of this CollatedWorksheetLabels.


        :param label_definitions: The label_definitions of this CollatedWorksheetLabels.  # noqa: E501
        :type: CollatedLabelDefinitions
        """

        self._label_definitions = label_definitions

    @property
    def configs(self):
        """Gets the configs of this CollatedWorksheetLabels.  # noqa: E501


        :return: The configs of this CollatedWorksheetLabels.  # noqa: E501
        :rtype: list[ConfigResolvedLabels]
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this CollatedWorksheetLabels.


        :param configs: The configs of this CollatedWorksheetLabels.  # noqa: E501
        :type: list[ConfigResolvedLabels]
        """

        self._configs = configs

    @property
    def studies(self):
        """Gets the studies of this CollatedWorksheetLabels.  # noqa: E501


        :return: The studies of this CollatedWorksheetLabels.  # noqa: E501
        :rtype: list[StudyResolvedLabels]
        """
        return self._studies

    @studies.setter
    def studies(self, studies):
        """Sets the studies of this CollatedWorksheetLabels.


        :param studies: The studies of this CollatedWorksheetLabels.  # noqa: E501
        :type: list[StudyResolvedLabels]
        """

        self._studies = studies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollatedWorksheetLabels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollatedWorksheetLabels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

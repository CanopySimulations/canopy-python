# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_open': 'bool',
        'modified_date': 'datetime',
        'modified_tenant_id': 'TenantId',
        'modified_user_id': 'UserId',
        'responses': 'list[SupportSessionResponse]'
    }

    attribute_map = {
        'is_open': 'isOpen',
        'modified_date': 'modifiedDate',
        'modified_tenant_id': 'modifiedTenantId',
        'modified_user_id': 'modifiedUserId',
        'responses': 'responses'
    }

    def __init__(self, is_open=None, modified_date=None, modified_tenant_id=None, modified_user_id=None, responses=None):  # noqa: E501
        """SupportSession - a model defined in Swagger"""  # noqa: E501

        self._is_open = None
        self._modified_date = None
        self._modified_tenant_id = None
        self._modified_user_id = None
        self._responses = None
        self.discriminator = None

        if is_open is not None:
            self.is_open = is_open
        if modified_date is not None:
            self.modified_date = modified_date
        if modified_tenant_id is not None:
            self.modified_tenant_id = modified_tenant_id
        if modified_user_id is not None:
            self.modified_user_id = modified_user_id
        if responses is not None:
            self.responses = responses

    @property
    def is_open(self):
        """Gets the is_open of this SupportSession.  # noqa: E501


        :return: The is_open of this SupportSession.  # noqa: E501
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this SupportSession.


        :param is_open: The is_open of this SupportSession.  # noqa: E501
        :type: bool
        """

        self._is_open = is_open

    @property
    def modified_date(self):
        """Gets the modified_date of this SupportSession.  # noqa: E501


        :return: The modified_date of this SupportSession.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this SupportSession.


        :param modified_date: The modified_date of this SupportSession.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def modified_tenant_id(self):
        """Gets the modified_tenant_id of this SupportSession.  # noqa: E501


        :return: The modified_tenant_id of this SupportSession.  # noqa: E501
        :rtype: TenantId
        """
        return self._modified_tenant_id

    @modified_tenant_id.setter
    def modified_tenant_id(self, modified_tenant_id):
        """Sets the modified_tenant_id of this SupportSession.


        :param modified_tenant_id: The modified_tenant_id of this SupportSession.  # noqa: E501
        :type: TenantId
        """

        self._modified_tenant_id = modified_tenant_id

    @property
    def modified_user_id(self):
        """Gets the modified_user_id of this SupportSession.  # noqa: E501


        :return: The modified_user_id of this SupportSession.  # noqa: E501
        :rtype: UserId
        """
        return self._modified_user_id

    @modified_user_id.setter
    def modified_user_id(self, modified_user_id):
        """Sets the modified_user_id of this SupportSession.


        :param modified_user_id: The modified_user_id of this SupportSession.  # noqa: E501
        :type: UserId
        """

        self._modified_user_id = modified_user_id

    @property
    def responses(self):
        """Gets the responses of this SupportSession.  # noqa: E501


        :return: The responses of this SupportSession.  # noqa: E501
        :rtype: list[SupportSessionResponse]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this SupportSession.


        :param responses: The responses of this SupportSession.  # noqa: E501
        :type: list[SupportSessionResponse]
        """

        self._responses = responses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

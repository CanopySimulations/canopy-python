# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetSimVersionDocumentsQueryResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sim_version': 'SimVersion',
        'documents': 'list[TextDocumentOptionalContent]',
        'units': 'dict(str, str)'
    }

    attribute_map = {
        'sim_version': 'simVersion',
        'documents': 'documents',
        'units': 'units'
    }

    def __init__(self, sim_version=None, documents=None, units=None):  # noqa: E501
        """GetSimVersionDocumentsQueryResult - a model defined in Swagger"""  # noqa: E501

        self._sim_version = None
        self._documents = None
        self._units = None
        self.discriminator = None

        if sim_version is not None:
            self.sim_version = sim_version
        if documents is not None:
            self.documents = documents
        if units is not None:
            self.units = units

    @property
    def sim_version(self):
        """Gets the sim_version of this GetSimVersionDocumentsQueryResult.  # noqa: E501


        :return: The sim_version of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :rtype: SimVersion
        """
        return self._sim_version

    @sim_version.setter
    def sim_version(self, sim_version):
        """Sets the sim_version of this GetSimVersionDocumentsQueryResult.


        :param sim_version: The sim_version of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :type: SimVersion
        """

        self._sim_version = sim_version

    @property
    def documents(self):
        """Gets the documents of this GetSimVersionDocumentsQueryResult.  # noqa: E501


        :return: The documents of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :rtype: list[TextDocumentOptionalContent]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this GetSimVersionDocumentsQueryResult.


        :param documents: The documents of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :type: list[TextDocumentOptionalContent]
        """

        self._documents = documents

    @property
    def units(self):
        """Gets the units of this GetSimVersionDocumentsQueryResult.  # noqa: E501


        :return: The units of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this GetSimVersionDocumentsQueryResult.


        :param units: The units of this GetSimVersionDocumentsQueryResult.  # noqa: E501
        :type: dict(str, str)
        """

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSimVersionDocumentsQueryResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSimVersionDocumentsQueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

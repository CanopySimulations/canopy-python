# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from canopy.swagger.api_client import ApiClient


class SimVersionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sim_version_get_document(self, sim_version, document_path, **kwargs):  # noqa: E501
        """sim_version_get_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_document(sim_version, document_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_version: (required)
        :param str document_path: (required)
        :param str tenant_id:
        :return: GetSimVersionDocumentQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sim_version_get_document_with_http_info(sim_version, document_path, **kwargs)  # noqa: E501
        else:
            (data) = self.sim_version_get_document_with_http_info(sim_version, document_path, **kwargs)  # noqa: E501
            return data

    def sim_version_get_document_with_http_info(self, sim_version, document_path, **kwargs):  # noqa: E501
        """sim_version_get_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_document_with_http_info(sim_version, document_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_version: (required)
        :param str document_path: (required)
        :param str tenant_id:
        :return: GetSimVersionDocumentQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sim_version', 'document_path', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_version_get_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sim_version' is set
        if ('sim_version' not in params or
                params['sim_version'] is None):
            raise ValueError("Missing the required parameter `sim_version` when calling `sim_version_get_document`")  # noqa: E501
        # verify the required parameter 'document_path' is set
        if ('document_path' not in params or
                params['document_path'] is None):
            raise ValueError("Missing the required parameter `document_path` when calling `sim_version_get_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sim_version' in params:
            path_params['simVersion'] = params['sim_version']  # noqa: E501
        if 'document_path' in params:
            path_params['documentPath'] = params['document_path']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sim-versions/{simVersion}/documents/{documentPath}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSimVersionDocumentQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sim_version_get_documents(self, sim_version, **kwargs):  # noqa: E501
        """sim_version_get_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_documents(sim_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_version: (required)
        :param str tenant_id:
        :return: GetSimVersionDocumentsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sim_version_get_documents_with_http_info(sim_version, **kwargs)  # noqa: E501
        else:
            (data) = self.sim_version_get_documents_with_http_info(sim_version, **kwargs)  # noqa: E501
            return data

    def sim_version_get_documents_with_http_info(self, sim_version, **kwargs):  # noqa: E501
        """sim_version_get_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_documents_with_http_info(sim_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_version: (required)
        :param str tenant_id:
        :return: GetSimVersionDocumentsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sim_version', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_version_get_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sim_version' is set
        if ('sim_version' not in params or
                params['sim_version'] is None):
            raise ValueError("Missing the required parameter `sim_version` when calling `sim_version_get_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sim_version' in params:
            path_params['simVersion'] = params['sim_version']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sim-versions/{simVersion}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSimVersionDocumentsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sim_version_get_sim_version(self, **kwargs):  # noqa: E501
        """sim_version_get_sim_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_sim_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id:
        :return: SimVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sim_version_get_sim_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sim_version_get_sim_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def sim_version_get_sim_version_with_http_info(self, **kwargs):  # noqa: E501
        """sim_version_get_sim_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_sim_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id:
        :return: SimVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_version_get_sim_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sim-versions/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sim_version_get_wiki_document(self, wiki_version, document_path, **kwargs):  # noqa: E501
        """sim_version_get_wiki_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_wiki_document(wiki_version, document_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wiki_version: (required)
        :param str document_path: (required)
        :param str tenant_id:
        :return: GetWikiDocumentQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sim_version_get_wiki_document_with_http_info(wiki_version, document_path, **kwargs)  # noqa: E501
        else:
            (data) = self.sim_version_get_wiki_document_with_http_info(wiki_version, document_path, **kwargs)  # noqa: E501
            return data

    def sim_version_get_wiki_document_with_http_info(self, wiki_version, document_path, **kwargs):  # noqa: E501
        """sim_version_get_wiki_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_get_wiki_document_with_http_info(wiki_version, document_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str wiki_version: (required)
        :param str document_path: (required)
        :param str tenant_id:
        :return: GetWikiDocumentQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wiki_version', 'document_path', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_version_get_wiki_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wiki_version' is set
        if ('wiki_version' not in params or
                params['wiki_version'] is None):
            raise ValueError("Missing the required parameter `wiki_version` when calling `sim_version_get_wiki_document`")  # noqa: E501
        # verify the required parameter 'document_path' is set
        if ('document_path' not in params or
                params['document_path'] is None):
            raise ValueError("Missing the required parameter `document_path` when calling `sim_version_get_wiki_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wiki_version' in params:
            path_params['wikiVersion'] = params['wiki_version']  # noqa: E501
        if 'document_path' in params:
            path_params['documentPath'] = params['document_path']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sim-versions/{wikiVersion}/wiki/{documentPath}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWikiDocumentQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sim_version_post_sim_version(self, sim_version_data, **kwargs):  # noqa: E501
        """sim_version_post_sim_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_post_sim_version(sim_version_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSimVersionData sim_version_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sim_version_post_sim_version_with_http_info(sim_version_data, **kwargs)  # noqa: E501
        else:
            (data) = self.sim_version_post_sim_version_with_http_info(sim_version_data, **kwargs)  # noqa: E501
            return data

    def sim_version_post_sim_version_with_http_info(self, sim_version_data, **kwargs):  # noqa: E501
        """sim_version_post_sim_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sim_version_post_sim_version_with_http_info(sim_version_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSimVersionData sim_version_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sim_version_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sim_version_post_sim_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sim_version_data' is set
        if ('sim_version_data' not in params or
                params['sim_version_data'] is None):
            raise ValueError("Missing the required parameter `sim_version_data` when calling `sim_version_post_sim_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sim_version_data' in params:
            body_params = params['sim_version_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/sim-versions/current', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

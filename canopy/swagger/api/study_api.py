# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from canopy.swagger.api_client import ApiClient


class StudyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def study_delete_study(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_delete_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete_study(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_delete_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_delete_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_delete_study_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_delete_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete_study_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'undelete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_delete_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_delete_study`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_delete_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'undelete' in params:
            query_params.append(('undelete', params['undelete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_delete_study_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_delete_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete_study_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_delete_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_delete_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_delete_study_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_delete_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_delete_study_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'undelete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_delete_study_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_delete_study_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_delete_study_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_delete_study_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'undelete' in params:
            query_params.append(('undelete', params['undelete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_all_tenants_study_statistics(self, **kwargs):  # noqa: E501
        """study_get_all_tenants_study_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_all_tenants_study_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :return: GetAllTenantsStudyStatisticsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_all_tenants_study_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.study_get_all_tenants_study_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def study_get_all_tenants_study_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """study_get_all_tenants_study_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_all_tenants_study_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date:
        :param str end_date:
        :return: GetAllTenantsStudyStatisticsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_all_tenants_study_statistics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAllTenantsStudyStatisticsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_sim_type(self, sim_type, **kwargs):  # noqa: E501
        """study_get_sim_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_sim_type(sim_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_type: (required)
        :param str tenant_id:
        :return: SimTypeDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_sim_type_with_http_info(sim_type, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_sim_type_with_http_info(sim_type, **kwargs)  # noqa: E501
            return data

    def study_get_sim_type_with_http_info(self, sim_type, **kwargs):  # noqa: E501
        """study_get_sim_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_sim_type_with_http_info(sim_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sim_type: (required)
        :param str tenant_id:
        :return: SimTypeDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sim_type', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_sim_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sim_type' is set
        if ('sim_type' not in params or
                params['sim_type'] is None):
            raise ValueError("Missing the required parameter `sim_type` when calling `study_get_sim_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sim_type' in params:
            path_params['simType'] = params['sim_type']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/types/sims/{simType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimTypeDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_studies(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_studies(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str filter:
        :param bool include_transient:
        :param str result_type:
        :return: GetStudiesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_studies_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_studies_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def study_get_studies_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_studies_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str filter:
        :param bool include_transient:
        :param str result_type:
        :return: GetStudiesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'filter', 'include_transient', 'result_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_studies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_studies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'include_transient' in params:
            query_params.append(('includeTransient', params['include_transient']))  # noqa: E501
        if 'result_type' in params:
            query_params.append(('resultType', params['result_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudiesQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_download(self, tenant_id, study_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download(tenant_id, study_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool full:
        :param bool channels_as_csv:
        :param bool merged_scalar_results_only:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_download_with_http_info(tenant_id, study_id, access_signature, expiry, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_download_with_http_info(tenant_id, study_id, access_signature, expiry, **kwargs)  # noqa: E501
            return data

    def study_get_study_download_with_http_info(self, tenant_id, study_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_with_http_info(tenant_id, study_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool full:
        :param bool channels_as_csv:
        :param bool merged_scalar_results_only:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'access_signature', 'expiry', 'file_name', 'full', 'channels_as_csv', 'merged_scalar_results_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_download`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_download`")  # noqa: E501
        # verify the required parameter 'access_signature' is set
        if ('access_signature' not in params or
                params['access_signature'] is None):
            raise ValueError("Missing the required parameter `access_signature` when calling `study_get_study_download`")  # noqa: E501
        # verify the required parameter 'expiry' is set
        if ('expiry' not in params or
                params['expiry'] is None):
            raise ValueError("Missing the required parameter `expiry` when calling `study_get_study_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'access_signature' in params:
            query_params.append(('accessSignature', params['access_signature']))  # noqa: E501
        if 'expiry' in params:
            query_params.append(('expiry', params['expiry']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'full' in params:
            query_params.append(('full', params['full']))  # noqa: E501
        if 'channels_as_csv' in params:
            query_params.append(('channelsAsCsv', params['channels_as_csv']))  # noqa: E501
        if 'merged_scalar_results_only' in params:
            query_params.append(('mergedScalarResultsOnly', params['merged_scalar_results_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_download_deprecated(self, tenant_id, user_id, study_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_download_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_deprecated(tenant_id, user_id, study_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool full:
        :param bool channels_as_csv:
        :param bool merged_scalar_results_only:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_download_deprecated_with_http_info(tenant_id, user_id, study_id, access_signature, expiry, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_download_deprecated_with_http_info(tenant_id, user_id, study_id, access_signature, expiry, **kwargs)  # noqa: E501
            return data

    def study_get_study_download_deprecated_with_http_info(self, tenant_id, user_id, study_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_download_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_deprecated_with_http_info(tenant_id, user_id, study_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool full:
        :param bool channels_as_csv:
        :param bool merged_scalar_results_only:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'access_signature', 'expiry', 'file_name', 'full', 'channels_as_csv', 'merged_scalar_results_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_download_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_download_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_download_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_download_deprecated`")  # noqa: E501
        # verify the required parameter 'access_signature' is set
        if ('access_signature' not in params or
                params['access_signature'] is None):
            raise ValueError("Missing the required parameter `access_signature` when calling `study_get_study_download_deprecated`")  # noqa: E501
        # verify the required parameter 'expiry' is set
        if ('expiry' not in params or
                params['expiry'] is None):
            raise ValueError("Missing the required parameter `expiry` when calling `study_get_study_download_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'access_signature' in params:
            query_params.append(('accessSignature', params['access_signature']))  # noqa: E501
        if 'expiry' in params:
            query_params.append(('expiry', params['expiry']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'full' in params:
            query_params.append(('full', params['full']))  # noqa: E501
        if 'channels_as_csv' in params:
            query_params.append(('channelsAsCsv', params['channels_as_csv']))  # noqa: E501
        if 'merged_scalar_results_only' in params:
            query_params.append(('mergedScalarResultsOnly', params['merged_scalar_results_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_download_url(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_download_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_url(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyDownloadUrlQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_download_url_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_download_url_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_download_url_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_download_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_url_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyDownloadUrlQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_download_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_download_url`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_download_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/download-url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyDownloadUrlQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_download_url_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_download_url_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_url_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :return: GetStudyDownloadUrlQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_download_url_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_download_url_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_download_url_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_download_url_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_download_url_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :return: GetStudyDownloadUrlQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_download_url_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_download_url_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_download_url_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_download_url_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/download-url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyDownloadUrlQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job(self, tenant_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job(tenant_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str sim_version:
        :return: GetStudyJobQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_with_http_info(tenant_id, study_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_with_http_info(tenant_id, study_id, job_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_with_http_info(self, tenant_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_with_http_info(tenant_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str sim_version:
        :return: GetStudyJobQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'job_id', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job_deprecated(self, tenant_id, user_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_deprecated(tenant_id, user_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str sim_version:
        :return: GetStudyJobQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_deprecated_with_http_info(self, tenant_id, user_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str sim_version:
        :return: GetStudyJobQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'job_id', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_job_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job_deprecated`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job_download(self, tenant_id, study_id, job_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_job_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_download(tenant_id, study_id, job_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool channels_as_csv:
        :param str sim_type_channels:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_download_with_http_info(tenant_id, study_id, job_id, access_signature, expiry, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_download_with_http_info(tenant_id, study_id, job_id, access_signature, expiry, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_download_with_http_info(self, tenant_id, study_id, job_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_job_download  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_download_with_http_info(tenant_id, study_id, job_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool channels_as_csv:
        :param str sim_type_channels:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'job_id', 'access_signature', 'expiry', 'file_name', 'channels_as_csv', 'sim_type_channels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job_download" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job_download`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job_download`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job_download`")  # noqa: E501
        # verify the required parameter 'access_signature' is set
        if ('access_signature' not in params or
                params['access_signature'] is None):
            raise ValueError("Missing the required parameter `access_signature` when calling `study_get_study_job_download`")  # noqa: E501
        # verify the required parameter 'expiry' is set
        if ('expiry' not in params or
                params['expiry'] is None):
            raise ValueError("Missing the required parameter `expiry` when calling `study_get_study_job_download`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'access_signature' in params:
            query_params.append(('accessSignature', params['access_signature']))  # noqa: E501
        if 'expiry' in params:
            query_params.append(('expiry', params['expiry']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'channels_as_csv' in params:
            query_params.append(('channelsAsCsv', params['channels_as_csv']))  # noqa: E501
        if 'sim_type_channels' in params:
            query_params.append(('simTypeChannels', params['sim_type_channels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/jobs/{jobId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job_download_deprecated(self, tenant_id, user_id, study_id, job_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_job_download_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_download_deprecated(tenant_id, user_id, study_id, job_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool channels_as_csv:
        :param str sim_type_channels:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_download_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, access_signature, expiry, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_download_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, access_signature, expiry, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_download_deprecated_with_http_info(self, tenant_id, user_id, study_id, job_id, access_signature, expiry, **kwargs):  # noqa: E501
        """study_get_study_job_download_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_download_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, access_signature, expiry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :param str access_signature: (required)
        :param str expiry: (required)
        :param str file_name:
        :param bool channels_as_csv:
        :param str sim_type_channels:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'job_id', 'access_signature', 'expiry', 'file_name', 'channels_as_csv', 'sim_type_channels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job_download_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job_download_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_job_download_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job_download_deprecated`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job_download_deprecated`")  # noqa: E501
        # verify the required parameter 'access_signature' is set
        if ('access_signature' not in params or
                params['access_signature'] is None):
            raise ValueError("Missing the required parameter `access_signature` when calling `study_get_study_job_download_deprecated`")  # noqa: E501
        # verify the required parameter 'expiry' is set
        if ('expiry' not in params or
                params['expiry'] is None):
            raise ValueError("Missing the required parameter `expiry` when calling `study_get_study_job_download_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []
        if 'access_signature' in params:
            query_params.append(('accessSignature', params['access_signature']))  # noqa: E501
        if 'expiry' in params:
            query_params.append(('expiry', params['expiry']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'channels_as_csv' in params:
            query_params.append(('channelsAsCsv', params['channels_as_csv']))  # noqa: E501
        if 'sim_type_channels' in params:
            query_params.append(('simTypeChannels', params['sim_type_channels']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job_metadata(self, tenant_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_metadata(tenant_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :return: GetStudyJobMetadataQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_metadata_with_http_info(tenant_id, study_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_metadata_with_http_info(tenant_id, study_id, job_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_metadata_with_http_info(self, tenant_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_metadata_with_http_info(tenant_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :return: GetStudyJobMetadataQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job_metadata`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job_metadata`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/jobs/{jobId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobMetadataQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_job_metadata_deprecated(self, tenant_id, user_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_metadata_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_metadata_deprecated(tenant_id, user_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :return: GetStudyJobMetadataQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_job_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_job_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_job_metadata_deprecated_with_http_info(self, tenant_id, user_id, study_id, job_id, **kwargs):  # noqa: E501
        """study_get_study_job_metadata_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_job_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str job_id: (required)
        :return: GetStudyJobMetadataQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_job_metadata_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_job_metadata_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_job_metadata_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_job_metadata_deprecated`")  # noqa: E501
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params or
                params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `study_get_study_job_metadata_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501
        if 'job_id' in params:
            path_params['jobId'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobMetadataQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_jobs(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_jobs(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str filter:
        :return: GetStudyJobsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_jobs_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_jobs_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_jobs_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_jobs_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str filter:
        :return: GetStudyJobsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_jobs`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_jobs_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_jobs_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_jobs_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str filter:
        :return: GetStudyJobsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_jobs_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_jobs_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_jobs_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_jobs_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_jobs_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param str filter:
        :return: GetStudyJobsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_jobs_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_jobs_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_jobs_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_jobs_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyJobsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_metadata(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_metadata_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_metadata_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_metadata_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_metadata`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_metadata_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_metadata_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_metadata_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_metadata_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_get_study_metadata_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_metadata_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_metadata_without_user_id_deprecated(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata_without_user_id_deprecated(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_metadata_without_user_id_deprecated_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_metadata_without_user_id_deprecated_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_metadata_without_user_id_deprecated_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_metadata_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_metadata_without_user_id_deprecated_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_metadata_without_user_id_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_metadata_without_user_id_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_metadata_without_user_id_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/auto/{studyId}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_type(self, study_type, **kwargs):  # noqa: E501
        """study_get_study_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_type(study_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_type: (required)
        :param str tenant_id:
        :return: StudyTypeDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_type_with_http_info(study_type, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_type_with_http_info(study_type, **kwargs)  # noqa: E501
            return data

    def study_get_study_type_with_http_info(self, study_type, **kwargs):  # noqa: E501
        """study_get_study_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_type_with_http_info(study_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_type: (required)
        :param str tenant_id:
        :return: StudyTypeDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_type', 'tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_type' is set
        if ('study_type' not in params or
                params['study_type'] is None):
            raise ValueError("Missing the required parameter `study_type` when calling `study_get_study_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_type' in params:
            path_params['studyType'] = params['study_type']  # noqa: E501

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/types/{studyType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StudyTypeDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_types(self, **kwargs):  # noqa: E501
        """study_get_study_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id:
        :return: GetStudyTypesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def study_get_study_types_with_http_info(self, **kwargs):  # noqa: E501
        """study_get_study_types  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id:
        :return: GetStudyTypesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tenant_id' in params:
            query_params.append(('tenantId', params['tenant_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyTypesQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_study_without_user_id_deprecated(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_without_user_id_deprecated(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_study_without_user_id_deprecated_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_study_without_user_id_deprecated_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_get_study_without_user_id_deprecated_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_get_study_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_study_without_user_id_deprecated_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param str sim_version:
        :return: GetStudyQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_study_without_user_id_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_study_without_user_id_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_get_study_without_user_id_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/auto/{studyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStudyQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_tenant_access_information(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_access_information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_access_information(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :return: GetTenantAccessInformationQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_tenant_access_information_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_tenant_access_information_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def study_get_tenant_access_information_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_access_information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_access_information_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :return: GetTenantAccessInformationQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_tenant_access_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_tenant_access_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/access', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantAccessInformationQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_tenant_billable_stored_simulation_count(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_billable_stored_simulation_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_billable_stored_simulation_count(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :return: GetTenantBillableStoredSimulationCountQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_tenant_billable_stored_simulation_count_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_tenant_billable_stored_simulation_count_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def study_get_tenant_billable_stored_simulation_count_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_billable_stored_simulation_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_billable_stored_simulation_count_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :return: GetTenantBillableStoredSimulationCountQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_tenant_billable_stored_simulation_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_tenant_billable_stored_simulation_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/statistics/stored/{tenantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantBillableStoredSimulationCountQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_get_tenant_study_statistics(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_study_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_study_statistics(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str start_date:
        :param str end_date:
        :return: GetTenantStudyStatisticsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_get_tenant_study_statistics_with_http_info(tenant_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_get_tenant_study_statistics_with_http_info(tenant_id, **kwargs)  # noqa: E501
            return data

    def study_get_tenant_study_statistics_with_http_info(self, tenant_id, **kwargs):  # noqa: E501
        """study_get_tenant_study_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_get_tenant_study_statistics_with_http_info(tenant_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str start_date:
        :param str end_date:
        :return: GetTenantStudyStatisticsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_get_tenant_study_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_get_tenant_study_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/statistics/{tenantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTenantStudyStatisticsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_merge_study(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_merge_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_merge_study(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param bool force_merge_from_baseline:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_merge_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_merge_study_with_http_info(tenant_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_merge_study_with_http_info(self, tenant_id, study_id, **kwargs):  # noqa: E501
        """study_merge_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_merge_study_with_http_info(tenant_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param bool force_merge_from_baseline:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'force_merge_from_baseline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_merge_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_merge_study`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_merge_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'force_merge_from_baseline' in params:
            query_params.append(('forceMergeFromBaseline', params['force_merge_from_baseline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/merge', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_merge_study_deprecated(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_merge_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_merge_study_deprecated(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param bool force_merge_from_baseline:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_merge_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
        else:
            (data) = self.study_merge_study_deprecated_with_http_info(tenant_id, user_id, study_id, **kwargs)  # noqa: E501
            return data

    def study_merge_study_deprecated_with_http_info(self, tenant_id, user_id, study_id, **kwargs):  # noqa: E501
        """study_merge_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_merge_study_deprecated_with_http_info(tenant_id, user_id, study_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param bool force_merge_from_baseline:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'force_merge_from_baseline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_merge_study_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_merge_study_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_merge_study_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_merge_study_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []
        if 'force_merge_from_baseline' in params:
            query_params.append(('forceMergeFromBaseline', params['force_merge_from_baseline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}/merge', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_post_study(self, tenant_id, data, **kwargs):  # noqa: E501
        """study_post_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_post_study(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewStudyData data: (required)
        :param bool run_inline:
        :return: PostStudyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_post_study_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.study_post_study_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
            return data

    def study_post_study_with_http_info(self, tenant_id, data, **kwargs):  # noqa: E501
        """study_post_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_post_study_with_http_info(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewStudyData data: (required)
        :param bool run_inline:
        :return: PostStudyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'data', 'run_inline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_post_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_post_study`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `study_post_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'run_inline' in params:
            query_params.append(('runInline', params['run_inline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostStudyResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_post_study_deprecated(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """study_post_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_post_study_deprecated(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewStudyData data: (required)
        :param bool run_inline:
        :return: PostStudyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_post_study_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.study_post_study_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
            return data

    def study_post_study_deprecated_with_http_info(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """study_post_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_post_study_deprecated_with_http_info(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewStudyData data: (required)
        :param bool run_inline:
        :return: PostStudyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'data', 'run_inline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_post_study_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_post_study_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_post_study_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `study_post_study_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'run_inline' in params:
            query_params.append(('runInline', params['run_inline']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostStudyResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_put_config_owner(self, tenant_id, study_id, owner_data, **kwargs):  # noqa: E501
        """study_put_config_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_config_owner(tenant_id, study_id, owner_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param ConfigOwnerData owner_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_put_config_owner_with_http_info(tenant_id, study_id, owner_data, **kwargs)  # noqa: E501
        else:
            (data) = self.study_put_config_owner_with_http_info(tenant_id, study_id, owner_data, **kwargs)  # noqa: E501
            return data

    def study_put_config_owner_with_http_info(self, tenant_id, study_id, owner_data, **kwargs):  # noqa: E501
        """study_put_config_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_config_owner_with_http_info(tenant_id, study_id, owner_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param ConfigOwnerData owner_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'owner_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_put_config_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_put_config_owner`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_put_config_owner`")  # noqa: E501
        # verify the required parameter 'owner_data' is set
        if ('owner_data' not in params or
                params['owner_data'] is None):
            raise ValueError("Missing the required parameter `owner_data` when calling `study_put_config_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'owner_data' in params:
            body_params = params['owner_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}/owner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_put_study(self, tenant_id, study_id, data, **kwargs):  # noqa: E501
        """study_put_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_study(tenant_id, study_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param UpdatedStudyData data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_put_study_with_http_info(tenant_id, study_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.study_put_study_with_http_info(tenant_id, study_id, data, **kwargs)  # noqa: E501
            return data

    def study_put_study_with_http_info(self, tenant_id, study_id, data, **kwargs):  # noqa: E501
        """study_put_study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_study_with_http_info(tenant_id, study_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str study_id: (required)
        :param UpdatedStudyData data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'study_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_put_study" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_put_study`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_put_study`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `study_put_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{studyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_put_study_deprecated(self, tenant_id, user_id, study_id, data, **kwargs):  # noqa: E501
        """study_put_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_study_deprecated(tenant_id, user_id, study_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param UpdatedStudyData data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.study_put_study_deprecated_with_http_info(tenant_id, user_id, study_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.study_put_study_deprecated_with_http_info(tenant_id, user_id, study_id, data, **kwargs)  # noqa: E501
            return data

    def study_put_study_deprecated_with_http_info(self, tenant_id, user_id, study_id, data, **kwargs):  # noqa: E501
        """study_put_study_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_put_study_deprecated_with_http_info(tenant_id, user_id, study_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str study_id: (required)
        :param UpdatedStudyData data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'study_id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_put_study_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `study_put_study_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `study_put_study_deprecated`")  # noqa: E501
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params or
                params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `study_put_study_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `study_put_study_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/studies/{tenantId}/{userId}/{studyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

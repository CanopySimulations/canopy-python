# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from canopy.swagger.api_client import ApiClient


class ConfigApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def config_decrypt(self, data, **kwargs):  # noqa: E501
        """config_decrypt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_decrypt(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_decrypt_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_decrypt_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def config_decrypt_with_http_info(self, data, **kwargs):  # noqa: E501
        """config_decrypt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_decrypt_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_decrypt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_decrypt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/decrypt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_delete_config(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_delete_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_delete_config(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_delete_config_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_delete_config_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_delete_config_with_http_info(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_delete_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_delete_config_with_http_info(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'sub_tree_path', 'undelete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_delete_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_delete_config`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_delete_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'undelete' in params:
            query_params.append(('undelete', params['undelete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{configId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_delete_config_deprecated(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_delete_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_delete_config_deprecated(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_delete_config_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_delete_config_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_delete_config_deprecated_with_http_info(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_delete_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_delete_config_deprecated_with_http_info(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param bool undelete:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'config_id', 'sub_tree_path', 'undelete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_delete_config_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_delete_config_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_delete_config_deprecated`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_delete_config_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'undelete' in params:
            query_params.append(('undelete', params['undelete']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}/{configId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_encrypt(self, data, **kwargs):  # noqa: E501
        """config_encrypt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_encrypt(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object data: (required)
        :param str description:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_encrypt_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_encrypt_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def config_encrypt_with_http_info(self, data, **kwargs):  # noqa: E501
        """config_encrypt  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_encrypt_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object data: (required)
        :param str description:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_encrypt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_encrypt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/encrypt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_get_config_with_http_info(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_with_http_info(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'sub_tree_path', 'sim_version', 'config_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_get_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501
        if 'config_version' in params:
            query_params.append(('configVersion', params['config_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{configId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config_deprecated(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_deprecated(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_get_config_deprecated_with_http_info(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_deprecated_with_http_info(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'config_id', 'sub_tree_path', 'sim_version', 'config_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_get_config_deprecated`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_get_config_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501
        if 'config_version' in params:
            query_params.append(('configVersion', params['config_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}/{configId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config_names(self, tenant_id, config_type, result_type, **kwargs):  # noqa: E501
        """config_get_config_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_names(tenant_id, config_type, result_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_type: (required)
        :param str result_type: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :return: GetConfigNamesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_names_with_http_info(tenant_id, config_type, result_type, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_names_with_http_info(tenant_id, config_type, result_type, **kwargs)  # noqa: E501
            return data

    def config_get_config_names_with_http_info(self, tenant_id, config_type, result_type, **kwargs):  # noqa: E501
        """config_get_config_names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_names_with_http_info(tenant_id, config_type, result_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_type: (required)
        :param str result_type: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :return: GetConfigNamesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_type', 'result_type', 'sub_tree_path', 'sim_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config_names`")  # noqa: E501
        # verify the required parameter 'config_type' is set
        if ('config_type' not in params or
                params['config_type'] is None):
            raise ValueError("Missing the required parameter `config_type` when calling `config_get_config_names`")  # noqa: E501
        # verify the required parameter 'result_type' is set
        if ('result_type' not in params or
                params['result_type'] is None):
            raise ValueError("Missing the required parameter `result_type` when calling `config_get_config_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'config_type' in params:
            query_params.append(('configType', params['config_type']))  # noqa: E501
        if 'result_type' in params:
            query_params.append(('resultType', params['result_type']))  # noqa: E501
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/names', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigNamesQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config_versions(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_versions(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :return: GetConfigVersionsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_versions_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_versions_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_get_config_versions_with_http_info(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_versions_with_http_info(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :return: GetConfigVersionsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config_versions`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_get_config_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{configId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigVersionsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config_versions_deprecated(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_versions_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_versions_deprecated(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :return: GetConfigVersionsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_versions_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_versions_deprecated_with_http_info(tenant_id, user_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_get_config_versions_deprecated_with_http_info(self, tenant_id, user_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_versions_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_versions_deprecated_with_http_info(tenant_id, user_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :return: GetConfigVersionsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'config_id', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config_versions_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config_versions_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_get_config_versions_deprecated`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_get_config_versions_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}/{configId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigVersionsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_config_without_user_id_deprecated(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_without_user_id_deprecated(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_config_without_user_id_deprecated_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_config_without_user_id_deprecated_with_http_info(tenant_id, config_id, **kwargs)  # noqa: E501
            return data

    def config_get_config_without_user_id_deprecated_with_http_info(self, tenant_id, config_id, **kwargs):  # noqa: E501
        """config_get_config_without_user_id_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_config_without_user_id_deprecated_with_http_info(tenant_id, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param str sub_tree_path:
        :param str sim_version:
        :param str config_version:
        :return: GetConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'sub_tree_path', 'sim_version', 'config_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_config_without_user_id_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_config_without_user_id_deprecated`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_get_config_without_user_id_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'sim_version' in params:
            query_params.append(('simVersion', params['sim_version']))  # noqa: E501
        if 'config_version' in params:
            query_params.append(('configVersion', params['config_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/auto/{configId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_get_configs(self, tenant_id, config_type, **kwargs):  # noqa: E501
        """config_get_configs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_configs(tenant_id, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_type: (required)
        :param str filter:
        :param str sub_tree_path:
        :param str result_type:
        :return: GetConfigsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_get_configs_with_http_info(tenant_id, config_type, **kwargs)  # noqa: E501
        else:
            (data) = self.config_get_configs_with_http_info(tenant_id, config_type, **kwargs)  # noqa: E501
            return data

    def config_get_configs_with_http_info(self, tenant_id, config_type, **kwargs):  # noqa: E501
        """config_get_configs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_get_configs_with_http_info(tenant_id, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_type: (required)
        :param str filter:
        :param str sub_tree_path:
        :param str result_type:
        :return: GetConfigsQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_type', 'filter', 'sub_tree_path', 'result_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_get_configs`")  # noqa: E501
        # verify the required parameter 'config_type' is set
        if ('config_type' not in params or
                params['config_type'] is None):
            raise ValueError("Missing the required parameter `config_type` when calling `config_get_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'config_type' in params:
            query_params.append(('configType', params['config_type']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501
        if 'result_type' in params:
            query_params.append(('resultType', params['result_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetConfigsQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post_config(self, tenant_id, data, **kwargs):  # noqa: E501
        """config_post_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_config(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewConfigData data: (required)
        :param str sub_tree_path:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_config_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_post_config_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
            return data

    def config_post_config_with_http_info(self, tenant_id, data, **kwargs):  # noqa: E501
        """config_post_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_config_with_http_info(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewConfigData data: (required)
        :param str sub_tree_path:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_post_config`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_post_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post_config_deprecated(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """config_post_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_config_deprecated(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewConfigData data: (required)
        :param str sub_tree_path:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_config_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_post_config_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
            return data

    def config_post_config_deprecated_with_http_info(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """config_post_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_config_deprecated_with_http_info(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewConfigData data: (required)
        :param str sub_tree_path:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post_config_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_post_config_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_post_config_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_post_config_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post_configs(self, tenant_id, data, **kwargs):  # noqa: E501
        """config_post_configs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_configs(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewBatchConfigData data: (required)
        :param str sub_tree_path:
        :return: BatchCreateConfigsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_configs_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_post_configs_with_http_info(tenant_id, data, **kwargs)  # noqa: E501
            return data

    def config_post_configs_with_http_info(self, tenant_id, data, **kwargs):  # noqa: E501
        """config_post_configs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_configs_with_http_info(tenant_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param NewBatchConfigData data: (required)
        :param str sub_tree_path:
        :return: BatchCreateConfigsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_post_configs`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_post_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchCreateConfigsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_post_configs_deprecated(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """config_post_configs_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_configs_deprecated(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewBatchConfigData data: (required)
        :param str sub_tree_path:
        :return: BatchCreateConfigsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_post_configs_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_post_configs_deprecated_with_http_info(tenant_id, user_id, data, **kwargs)  # noqa: E501
            return data

    def config_post_configs_deprecated_with_http_info(self, tenant_id, user_id, data, **kwargs):  # noqa: E501
        """config_post_configs_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_post_configs_deprecated_with_http_info(tenant_id, user_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param NewBatchConfigData data: (required)
        :param str sub_tree_path:
        :return: BatchCreateConfigsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_post_configs_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_post_configs_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_post_configs_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_post_configs_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}/batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchCreateConfigsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_put_config(self, tenant_id, config_id, data, **kwargs):  # noqa: E501
        """config_put_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config(tenant_id, config_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param UpdatedConfigData data: (required)
        :param str sub_tree_path:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_put_config_with_http_info(tenant_id, config_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_put_config_with_http_info(tenant_id, config_id, data, **kwargs)  # noqa: E501
            return data

    def config_put_config_with_http_info(self, tenant_id, config_id, data, **kwargs):  # noqa: E501
        """config_put_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config_with_http_info(tenant_id, config_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param UpdatedConfigData data: (required)
        :param str sub_tree_path:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_put_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_put_config`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_put_config`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_put_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{configId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_put_config_deprecated(self, tenant_id, user_id, config_id, data, **kwargs):  # noqa: E501
        """config_put_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config_deprecated(tenant_id, user_id, config_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param UpdatedConfigData data: (required)
        :param str sub_tree_path:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_put_config_deprecated_with_http_info(tenant_id, user_id, config_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_put_config_deprecated_with_http_info(tenant_id, user_id, config_id, data, **kwargs)  # noqa: E501
            return data

    def config_put_config_deprecated_with_http_info(self, tenant_id, user_id, config_id, data, **kwargs):  # noqa: E501
        """config_put_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config_deprecated_with_http_info(tenant_id, user_id, config_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param str config_id: (required)
        :param UpdatedConfigData data: (required)
        :param str sub_tree_path:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'config_id', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_put_config_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_put_config_deprecated`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `config_put_config_deprecated`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_put_config_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_put_config_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{userId}/{configId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_put_config_owner(self, tenant_id, config_id, owner_data, **kwargs):  # noqa: E501
        """config_put_config_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config_owner(tenant_id, config_id, owner_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param ConfigOwnerData owner_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_put_config_owner_with_http_info(tenant_id, config_id, owner_data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_put_config_owner_with_http_info(tenant_id, config_id, owner_data, **kwargs)  # noqa: E501
            return data

    def config_put_config_owner_with_http_info(self, tenant_id, config_id, owner_data, **kwargs):  # noqa: E501
        """config_put_config_owner  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_put_config_owner_with_http_info(tenant_id, config_id, owner_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str config_id: (required)
        :param ConfigOwnerData owner_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'config_id', 'owner_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_put_config_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_put_config_owner`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `config_put_config_owner`")  # noqa: E501
        # verify the required parameter 'owner_data' is set
        if ('owner_data' not in params or
                params['owner_data'] is None):
            raise ValueError("Missing the required parameter `owner_data` when calling `config_put_config_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'config_id' in params:
            path_params['configId'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'owner_data' in params:
            body_params = params['owner_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/{tenantId}/{configId}/owner', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_upgrade_config(self, tenant_id, target_sim_version, data, **kwargs):  # noqa: E501
        """config_upgrade_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_upgrade_config(tenant_id, target_sim_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str target_sim_version: (required)
        :param UpgradeConfigData data: (required)
        :param str sub_tree_path:
        :return: UpgradeConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_upgrade_config_with_http_info(tenant_id, target_sim_version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_upgrade_config_with_http_info(tenant_id, target_sim_version, data, **kwargs)  # noqa: E501
            return data

    def config_upgrade_config_with_http_info(self, tenant_id, target_sim_version, data, **kwargs):  # noqa: E501
        """config_upgrade_config  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_upgrade_config_with_http_info(tenant_id, target_sim_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str target_sim_version: (required)
        :param UpgradeConfigData data: (required)
        :param str sub_tree_path:
        :return: UpgradeConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'target_sim_version', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_upgrade_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `config_upgrade_config`")  # noqa: E501
        # verify the required parameter 'target_sim_version' is set
        if ('target_sim_version' not in params or
                params['target_sim_version'] is None):
            raise ValueError("Missing the required parameter `target_sim_version` when calling `config_upgrade_config`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_upgrade_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'target_sim_version' in params:
            path_params['targetSimVersion'] = params['target_sim_version']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/upgrade/{tenantId}/{targetSimVersion}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeConfigQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def config_upgrade_config_deprecated(self, target_sim_version, data, **kwargs):  # noqa: E501
        """config_upgrade_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_upgrade_config_deprecated(target_sim_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_sim_version: (required)
        :param UpgradeConfigData data: (required)
        :param str sub_tree_path:
        :return: UpgradeConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.config_upgrade_config_deprecated_with_http_info(target_sim_version, data, **kwargs)  # noqa: E501
        else:
            (data) = self.config_upgrade_config_deprecated_with_http_info(target_sim_version, data, **kwargs)  # noqa: E501
            return data

    def config_upgrade_config_deprecated_with_http_info(self, target_sim_version, data, **kwargs):  # noqa: E501
        """config_upgrade_config_deprecated  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_upgrade_config_deprecated_with_http_info(target_sim_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_sim_version: (required)
        :param UpgradeConfigData data: (required)
        :param str sub_tree_path:
        :return: UpgradeConfigQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_sim_version', 'data', 'sub_tree_path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_upgrade_config_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_sim_version' is set
        if ('target_sim_version' not in params or
                params['target_sim_version'] is None):
            raise ValueError("Missing the required parameter `target_sim_version` when calling `config_upgrade_config_deprecated`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `config_upgrade_config_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_sim_version' in params:
            path_params['targetSimVersion'] = params['target_sim_version']  # noqa: E501

        query_params = []
        if 'sub_tree_path' in params:
            query_params.append(('subTreePath', params['sub_tree_path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/configs/upgrade/{targetSimVersion}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeConfigQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

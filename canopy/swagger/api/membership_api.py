# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from canopy.swagger.api_client import ApiClient


class MembershipApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def membership_delete_refresh_tokens(self, tenant_id, user_id, **kwargs):  # noqa: E501
        """membership_delete_refresh_tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_delete_refresh_tokens(tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_delete_refresh_tokens_with_http_info(tenant_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_delete_refresh_tokens_with_http_info(tenant_id, user_id, **kwargs)  # noqa: E501
            return data

    def membership_delete_refresh_tokens_with_http_info(self, tenant_id, user_id, **kwargs):  # noqa: E501
        """membership_delete_refresh_tokens  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_delete_refresh_tokens_with_http_info(tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_delete_refresh_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `membership_delete_refresh_tokens`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `membership_delete_refresh_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/refresh-tokens/{tenantId}/{userId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_get_password_reset_token_validity(self, user_id, token, **kwargs):  # noqa: E501
        """membership_get_password_reset_token_validity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_get_password_reset_token_validity(user_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str token: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_get_password_reset_token_validity_with_http_info(user_id, token, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_get_password_reset_token_validity_with_http_info(user_id, token, **kwargs)  # noqa: E501
            return data

    def membership_get_password_reset_token_validity_with_http_info(self, user_id, token, **kwargs):  # noqa: E501
        """membership_get_password_reset_token_validity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_get_password_reset_token_validity_with_http_info(user_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param str token: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_get_password_reset_token_validity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `membership_get_password_reset_token_validity`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `membership_get_password_reset_token_validity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/password-reset-tokens/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_get_user_roles(self, tenant_id, user_id, **kwargs):  # noqa: E501
        """membership_get_user_roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_get_user_roles(tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :return: GetUserRolesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_get_user_roles_with_http_info(tenant_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_get_user_roles_with_http_info(tenant_id, user_id, **kwargs)  # noqa: E501
            return data

    def membership_get_user_roles_with_http_info(self, tenant_id, user_id, **kwargs):  # noqa: E501
        """membership_get_user_roles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_get_user_roles_with_http_info(tenant_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :return: GetUserRolesQueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_get_user_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `membership_get_user_roles`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `membership_get_user_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/membership/roles/{tenantId}/{userId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetUserRolesQueryResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_post_identified_user(self, identified_user_data, **kwargs):  # noqa: E501
        """membership_post_identified_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_identified_user(identified_user_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifiedUserData identified_user_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_post_identified_user_with_http_info(identified_user_data, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_post_identified_user_with_http_info(identified_user_data, **kwargs)  # noqa: E501
            return data

    def membership_post_identified_user_with_http_info(self, identified_user_data, **kwargs):  # noqa: E501
        """membership_post_identified_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_identified_user_with_http_info(identified_user_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdentifiedUserData identified_user_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identified_user_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_post_identified_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'identified_user_data' is set
        if ('identified_user_data' not in params or
                params['identified_user_data'] is None):
            raise ValueError("Missing the required parameter `identified_user_data` when calling `membership_post_identified_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'identified_user_data' in params:
            body_params = params['identified_user_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/identified-users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_post_initialize(self, **kwargs):  # noqa: E501
        """membership_post_initialize  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_initialize(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_post_initialize_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.membership_post_initialize_with_http_info(**kwargs)  # noqa: E501
            return data

    def membership_post_initialize_with_http_info(self, **kwargs):  # noqa: E501
        """membership_post_initialize  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_initialize_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_post_initialize" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/initialize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_post_password_reset_confirmation(self, password_reset_confirmation_data, **kwargs):  # noqa: E501
        """membership_post_password_reset_confirmation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_password_reset_confirmation(password_reset_confirmation_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetConfirmationData password_reset_confirmation_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_post_password_reset_confirmation_with_http_info(password_reset_confirmation_data, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_post_password_reset_confirmation_with_http_info(password_reset_confirmation_data, **kwargs)  # noqa: E501
            return data

    def membership_post_password_reset_confirmation_with_http_info(self, password_reset_confirmation_data, **kwargs):  # noqa: E501
        """membership_post_password_reset_confirmation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_password_reset_confirmation_with_http_info(password_reset_confirmation_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetConfirmationData password_reset_confirmation_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password_reset_confirmation_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_post_password_reset_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password_reset_confirmation_data' is set
        if ('password_reset_confirmation_data' not in params or
                params['password_reset_confirmation_data'] is None):
            raise ValueError("Missing the required parameter `password_reset_confirmation_data` when calling `membership_post_password_reset_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password_reset_confirmation_data' in params:
            body_params = params['password_reset_confirmation_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/password-reset-confirmations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_post_password_reset_request(self, password_reset_request_data, **kwargs):  # noqa: E501
        """membership_post_password_reset_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_password_reset_request(password_reset_request_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetRequestData password_reset_request_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_post_password_reset_request_with_http_info(password_reset_request_data, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_post_password_reset_request_with_http_info(password_reset_request_data, **kwargs)  # noqa: E501
            return data

    def membership_post_password_reset_request_with_http_info(self, password_reset_request_data, **kwargs):  # noqa: E501
        """membership_post_password_reset_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_password_reset_request_with_http_info(password_reset_request_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PasswordResetRequestData password_reset_request_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password_reset_request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_post_password_reset_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password_reset_request_data' is set
        if ('password_reset_request_data' not in params or
                params['password_reset_request_data'] is None):
            raise ValueError("Missing the required parameter `password_reset_request_data` when calling `membership_post_password_reset_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password_reset_request_data' in params:
            body_params = params['password_reset_request_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/membership/password-reset-requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_post_registration(self, registration_data, **kwargs):  # noqa: E501
        """membership_post_registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_registration(registration_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegistrationData registration_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_post_registration_with_http_info(registration_data, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_post_registration_with_http_info(registration_data, **kwargs)  # noqa: E501
            return data

    def membership_post_registration_with_http_info(self, registration_data, **kwargs):  # noqa: E501
        """membership_post_registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_post_registration_with_http_info(registration_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegistrationData registration_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_post_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registration_data' is set
        if ('registration_data' not in params or
                params['registration_data'] is None):
            raise ValueError("Missing the required parameter `registration_data` when calling `membership_post_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registration_data' in params:
            body_params = params['registration_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/membership/registrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membership_put_user_role(self, tenant_id, user_id, role_data, **kwargs):  # noqa: E501
        """membership_put_user_role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_put_user_role(tenant_id, user_id, role_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param UserRoleData role_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membership_put_user_role_with_http_info(tenant_id, user_id, role_data, **kwargs)  # noqa: E501
        else:
            (data) = self.membership_put_user_role_with_http_info(tenant_id, user_id, role_data, **kwargs)  # noqa: E501
            return data

    def membership_put_user_role_with_http_info(self, tenant_id, user_id, role_data, **kwargs):  # noqa: E501
        """membership_put_user_role  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membership_put_user_role_with_http_info(tenant_id, user_id, role_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_id: (required)
        :param str user_id: (required)
        :param UserRoleData role_data: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_id', 'user_id', 'role_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membership_put_user_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_id' is set
        if ('tenant_id' not in params or
                params['tenant_id'] is None):
            raise ValueError("Missing the required parameter `tenant_id` when calling `membership_put_user_role`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `membership_put_user_role`")  # noqa: E501
        # verify the required parameter 'role_data' is set
        if ('role_data' not in params or
                params['role_data'] is None):
            raise ValueError("Missing the required parameter `role_data` when calling `membership_put_user_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant_id' in params:
            path_params['tenantId'] = params['tenant_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'role_data' in params:
            body_params = params['role_data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/membership/roles/{tenantId}/{userId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

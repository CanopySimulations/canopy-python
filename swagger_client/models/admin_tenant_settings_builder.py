# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminTenantSettingsBuilder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'study_types': 'list[str]',
        'tags': 'list[str]',
        'internal_tags': 'list[str]',
        'sim_version': 'SimVersion',
        'pool_settings': 'PoolSettings',
        'secondary_pool_settings': 'PoolSettings',
        'heavy_pool_settings': 'PoolSettings'
    }

    attribute_map = {
        'study_types': 'studyTypes',
        'tags': 'tags',
        'internal_tags': 'internalTags',
        'sim_version': 'simVersion',
        'pool_settings': 'poolSettings',
        'secondary_pool_settings': 'secondaryPoolSettings',
        'heavy_pool_settings': 'heavyPoolSettings'
    }

    def __init__(self, study_types=None, tags=None, internal_tags=None, sim_version=None, pool_settings=None, secondary_pool_settings=None, heavy_pool_settings=None):  # noqa: E501
        """AdminTenantSettingsBuilder - a model defined in Swagger"""  # noqa: E501

        self._study_types = None
        self._tags = None
        self._internal_tags = None
        self._sim_version = None
        self._pool_settings = None
        self._secondary_pool_settings = None
        self._heavy_pool_settings = None
        self.discriminator = None

        if study_types is not None:
            self.study_types = study_types
        if tags is not None:
            self.tags = tags
        if internal_tags is not None:
            self.internal_tags = internal_tags
        if sim_version is not None:
            self.sim_version = sim_version
        if pool_settings is not None:
            self.pool_settings = pool_settings
        if secondary_pool_settings is not None:
            self.secondary_pool_settings = secondary_pool_settings
        if heavy_pool_settings is not None:
            self.heavy_pool_settings = heavy_pool_settings

    @property
    def study_types(self):
        """Gets the study_types of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The study_types of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: list[str]
        """
        return self._study_types

    @study_types.setter
    def study_types(self, study_types):
        """Sets the study_types of this AdminTenantSettingsBuilder.


        :param study_types: The study_types of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["straightSim", "apexSim", "quasiStaticLap", "generateRacingLine", "quasiStaticLapWithGenerateRacingLine", "deploymentLap", "failureSim", "successSim", "virtual4Post", "limitSim", "driveCycleSim", "dynamicLap", "dynamicLapWithSLS", "dynamicLapHD", "dynamicMultiLap", "tyreThermalDynamicLap", "tyreThermalDynamicMultiLap", "overtakingLap", "allLapSims", "dragSim", "thermalReplay", "tyreReplay", "pacejkaCanopyConverter", "aircraftSim", "channelInference", "telemetry", "iliadCollocation", "subLimitSim", "unknown"]  # noqa: E501
        if not set(study_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `study_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(study_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._study_types = study_types

    @property
    def tags(self):
        """Gets the tags of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The tags of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AdminTenantSettingsBuilder.


        :param tags: The tags of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def internal_tags(self):
        """Gets the internal_tags of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The internal_tags of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: list[str]
        """
        return self._internal_tags

    @internal_tags.setter
    def internal_tags(self, internal_tags):
        """Sets the internal_tags of this AdminTenantSettingsBuilder.


        :param internal_tags: The internal_tags of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: list[str]
        """

        self._internal_tags = internal_tags

    @property
    def sim_version(self):
        """Gets the sim_version of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The sim_version of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: SimVersion
        """
        return self._sim_version

    @sim_version.setter
    def sim_version(self, sim_version):
        """Sets the sim_version of this AdminTenantSettingsBuilder.


        :param sim_version: The sim_version of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: SimVersion
        """

        self._sim_version = sim_version

    @property
    def pool_settings(self):
        """Gets the pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: PoolSettings
        """
        return self._pool_settings

    @pool_settings.setter
    def pool_settings(self, pool_settings):
        """Sets the pool_settings of this AdminTenantSettingsBuilder.


        :param pool_settings: The pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: PoolSettings
        """

        self._pool_settings = pool_settings

    @property
    def secondary_pool_settings(self):
        """Gets the secondary_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The secondary_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: PoolSettings
        """
        return self._secondary_pool_settings

    @secondary_pool_settings.setter
    def secondary_pool_settings(self, secondary_pool_settings):
        """Sets the secondary_pool_settings of this AdminTenantSettingsBuilder.


        :param secondary_pool_settings: The secondary_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: PoolSettings
        """

        self._secondary_pool_settings = secondary_pool_settings

    @property
    def heavy_pool_settings(self):
        """Gets the heavy_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501


        :return: The heavy_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :rtype: PoolSettings
        """
        return self._heavy_pool_settings

    @heavy_pool_settings.setter
    def heavy_pool_settings(self, heavy_pool_settings):
        """Sets the heavy_pool_settings of this AdminTenantSettingsBuilder.


        :param heavy_pool_settings: The heavy_pool_settings of this AdminTenantSettingsBuilder.  # noqa: E501
        :type: PoolSettings
        """

        self._heavy_pool_settings = heavy_pool_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminTenantSettingsBuilder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminTenantSettingsBuilder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

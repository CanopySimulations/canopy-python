# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdatedAccountSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_username': 'str',
        'new_email': 'str',
        'new_password': 'str',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'new_username': 'newUsername',
        'new_email': 'newEmail',
        'new_password': 'newPassword',
        'is_enabled': 'isEnabled'
    }

    def __init__(self, new_username=None, new_email=None, new_password=None, is_enabled=None):  # noqa: E501
        """UpdatedAccountSettings - a model defined in Swagger"""  # noqa: E501

        self._new_username = None
        self._new_email = None
        self._new_password = None
        self._is_enabled = None
        self.discriminator = None

        if new_username is not None:
            self.new_username = new_username
        if new_email is not None:
            self.new_email = new_email
        if new_password is not None:
            self.new_password = new_password
        if is_enabled is not None:
            self.is_enabled = is_enabled

    @property
    def new_username(self):
        """Gets the new_username of this UpdatedAccountSettings.  # noqa: E501


        :return: The new_username of this UpdatedAccountSettings.  # noqa: E501
        :rtype: str
        """
        return self._new_username

    @new_username.setter
    def new_username(self, new_username):
        """Sets the new_username of this UpdatedAccountSettings.


        :param new_username: The new_username of this UpdatedAccountSettings.  # noqa: E501
        :type: str
        """

        self._new_username = new_username

    @property
    def new_email(self):
        """Gets the new_email of this UpdatedAccountSettings.  # noqa: E501


        :return: The new_email of this UpdatedAccountSettings.  # noqa: E501
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this UpdatedAccountSettings.


        :param new_email: The new_email of this UpdatedAccountSettings.  # noqa: E501
        :type: str
        """

        self._new_email = new_email

    @property
    def new_password(self):
        """Gets the new_password of this UpdatedAccountSettings.  # noqa: E501


        :return: The new_password of this UpdatedAccountSettings.  # noqa: E501
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """Sets the new_password of this UpdatedAccountSettings.


        :param new_password: The new_password of this UpdatedAccountSettings.  # noqa: E501
        :type: str
        """

        self._new_password = new_password

    @property
    def is_enabled(self):
        """Gets the is_enabled of this UpdatedAccountSettings.  # noqa: E501


        :return: The is_enabled of this UpdatedAccountSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this UpdatedAccountSettings.


        :param is_enabled: The is_enabled of this UpdatedAccountSettings.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatedAccountSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatedAccountSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Canopy.Api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ListFilterGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'str',
        'conditions': 'list[ListFilterCondition]',
        'groups': 'list[ListFilterGroup]'
    }

    attribute_map = {
        'operator': 'operator',
        'conditions': 'conditions',
        'groups': 'groups'
    }

    def __init__(self, operator=None, conditions=None, groups=None):  # noqa: E501
        """ListFilterGroup - a model defined in Swagger"""  # noqa: E501

        self._operator = None
        self._conditions = None
        self._groups = None
        self.discriminator = None

        if operator is not None:
            self.operator = operator
        if conditions is not None:
            self.conditions = conditions
        if groups is not None:
            self.groups = groups

    @property
    def operator(self):
        """Gets the operator of this ListFilterGroup.  # noqa: E501


        :return: The operator of this ListFilterGroup.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ListFilterGroup.


        :param operator: The operator of this ListFilterGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def conditions(self):
        """Gets the conditions of this ListFilterGroup.  # noqa: E501


        :return: The conditions of this ListFilterGroup.  # noqa: E501
        :rtype: list[ListFilterCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ListFilterGroup.


        :param conditions: The conditions of this ListFilterGroup.  # noqa: E501
        :type: list[ListFilterCondition]
        """

        self._conditions = conditions

    @property
    def groups(self):
        """Gets the groups of this ListFilterGroup.  # noqa: E501


        :return: The groups of this ListFilterGroup.  # noqa: E501
        :rtype: list[ListFilterGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ListFilterGroup.


        :param groups: The groups of this ListFilterGroup.  # noqa: E501
        :type: list[ListFilterGroup]
        """

        self._groups = groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListFilterGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListFilterGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
